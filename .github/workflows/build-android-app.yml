name: "Build Android app"

on:
  workflow_dispatch:
    branches: [main]


permissions:
      id-token: write 
      contents: read 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Google Play Python Client
        run: |
          python -m pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Fetch Latest Version Code from Google Play
        id: get-latest-version
        run: |
          # Create Python script to fetch versionCode from Google Play
          echo "import json" > fetch_version.py
          echo "import google.auth" >> fetch_version.py
          echo "from googleapiclient.discovery import build" >> fetch_version.py
          echo "from google.oauth2 import service_account" >> fetch_version.py

          echo "SCOPES = ['https://www.googleapis.com/auth/androidpublisher']" >> fetch_version.py
          echo "PACKAGE_NAME = 'org.courtapp.dev'" >> fetch_version.py

          # Load credentials directly from the environment variable
          echo "credentials = service_account.Credentials.from_service_account_info(json.loads('''${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY }}'''), scopes=SCOPES)" >> fetch_version.py

          echo "service = build('androidpublisher', 'v3', credentials=credentials)" >> fetch_version.py

          echo "edit_request = service.edits().insert(body={}, packageName=PACKAGE_NAME)" >> fetch_version.py
          echo "edit = edit_request.execute()" >> fetch_version.py

          echo "track_response = service.edits().tracks().get(packageName=PACKAGE_NAME, editId=edit['id'], track='internal').execute()" >> fetch_version.py
          echo "latest_version_code = track_response['releases'][0]['versionCodes'][0]" >> fetch_version.py

          echo "print(latest_version_code)" >> fetch_version.py

          # Run Python script to fetch the latest version code
          latest_version_code=$(python fetch_version.py)
          echo "Latest version code from Google Play: $latest_version_code"

          # Increment version code by 1
          new_version_code=$((int(latest_version_code) + 1))
          echo "New version code: $new_version_code"

          # Replace the versionCode in build.gradle
          sed -i "s/versionCode [0-9]*/versionCode $new_version_code/g" packages/mobile/android/app/build.gradle
          echo "Updated build.gradle with versionCode $new_version_code"

      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt
          cache: gradle

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Node  
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Run Yarn Install
        run: |
             npm i -g corepack
             yarn install

      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      
      - name: Build shared folder
        run: |
             yarn build-shared

      - name: Run Yarn Install
        run: |
             yarn install

      - name: Build with Gradle
        env:
          KEYSTORE_PASSWORD: ${{ vars.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ vars.KEY_ALIAS }}
          KEY_PASSWORD: ${{ vars.KEY_PASSWORD }}
        run: |
             cd packages/mobile/android
             ./gradlew bundleRelease

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: packages/mobile/android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 3

      # New Step: Upload APK to Google Play Console Internal Testing
      - name: Upload APK to Google Play Console Internal Testing
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ vars.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY }}
          packageName: org.courtapp.dev
          releaseFiles: packages/mobile/android/app/build/outputs/bundle/release/app-release.aab
          track: internal
          inAppUpdatePriority: 3  # Optional: Set in-app update priority
          status: draft           # Optional: You can set status to draft, inProgress, or completed
        env:
          DEBUG: '*'
