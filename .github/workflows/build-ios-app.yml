name: "Build iOS app"

on:
  workflow_dispatch:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyJWT requests python-dotenv

      - name: Create .env file for fetching latest version
        run: |
          echo "APP_STORE_CONNECT_API_KEY_ID=${{ vars.APP_STORE_CONNECT_API_KEY_ID }}" >> .env
          echo "APP_STORE_CONNECT_ISSUER_ID=${{ vars.APP_STORE_CONNECT_ISSUER_ID }}" >> .env
          echo "APP_STORE_CONNECT_API_PRIVATE_KEY=\"${{ vars.APP_STORE_CONNECT_API_PRIVATE_KEY }}\"" >> .env
          echo "APP_ID=${{ vars.APP_ID }}" >> .env

      - name: Increment ios version in pbxproj file
        run: |
          new_ios_version=$(python increment_ios_app_version.py)
          PBXPROJ_FILE="./packages/mobile/ios/CourtApp.xcodeproj/project.pbxproj"
          sed -i  "s/CURRENT_PROJECT_VERSION = [0-9]*;/CURRENT_PROJECT_VERSION = ${new_ios_version};/" $PBXPROJ_FILE 
          rm .env

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ vars.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ vars.P12_PASSWORD }}
          PROVISION_PROFILES_BASE64: ${{ vars.PROVISION_PROFILES_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ vars.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/CourtAppDistribution_10_09_2024.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILES_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # extract and copy provisioning profile(s)
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles 
          
          # echo some output
          security find-identity -v -p codesigning
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      # Cache Yarn dependencies
      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            packages/mobile/ios/Pods
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}-

      - name: Run Yarn Install
        run: |
             yarn install 
      
      - name: Build shared folder
        run: |
             yarn build-shared

      - name: Run Yarn Install
        run: |
             yarn install        

      # Cache Cocoapods
      - name: Cache Cocoapods
        uses: actions/cache@v4
        with:
          path: |
            packages/mobile/ios/Pods
            packages/mobile/ios/Podfile.lock
          key: pods-cache-${{ runner.os }}-${{ hashFiles('packages/mobile/ios/Podfile.lock') }}
          restore-keys: |
            pods-cache-${{ runner.os }}-

      - name: Install Cocoapod dependencies
        run: |
          yarn pod-install


      # Cache Build Archive
      - name: Cache Build Archive
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            $RUNNER_TEMP/CourtApp.xcarchive
          key: build-archive-${{ runner.os }}-${{ hashFiles('packages/mobile/ios/**/*.xcodeproj/**/*', 'packages/mobile/ios/**/*.xcworkspace/**/*') }}
          restore-keys: |
            build-archive-${{ runner.os }}-

      - name: Build archive
        run: |
          cd packages/mobile/ios
          xcodebuild -workspace CourtApp.xcworkspace \
          -scheme "CourtApp" \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/CourtApp.xcarchive \
          archive          

      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ vars.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/CourtApp.xcarchive \
          -exportOptionsPlist $EXPORT_OPTS_PATH \
          -exportPath $RUNNER_TEMP/build                    

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ runner.temp }}/build/CourtApp.ipa
          retention-days: 3

      - name: 'Upload app to TestFlight'
        uses: Apple-Actions/upload-testflight-build@master
        with:
          app-path: ${{ runner.temp }}/build/CourtApp.ipa 
          issuer-id: ${{ vars.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ vars.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ vars.APPSTORE_API_PRIVATE_KEY }}
